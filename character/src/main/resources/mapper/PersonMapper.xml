<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coc.character.mapper.PersonMapper">
  <resultMap id="BaseResultMap" type="com.coc.character.pojo.Person">
    <id column="userid" jdbcType="VARCHAR" property="userid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="str" jdbcType="INTEGER" property="str" />
    <result column="agl" jdbcType="INTEGER" property="agl" />
    <result column="edu" jdbcType="INTEGER" property="edu" />
    <result column="phy" jdbcType="INTEGER" property="phy" />
    <result column="cha" jdbcType="INTEGER" property="cha" />
    <result column="vol" jdbcType="INTEGER" property="vol" />
    <result column="bod" jdbcType="INTEGER" property="bod" />
    <result column="bra" jdbcType="INTEGER" property="bra" />
    <result column="luck" jdbcType="INTEGER" property="luck" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="hp" jdbcType="INTEGER" property="hp" />
    <result column="mp" jdbcType="INTEGER" property="mp" />
    <result column="potential" jdbcType="INTEGER" property="potential" />
    <result column="interest" jdbcType="INTEGER" property="interest" />
    <result column="shin" jdbcType="INTEGER" property="shin" />
    <result column="swim" jdbcType="INTEGER" property="swim" />
    <result column="spy" jdbcType="INTEGER" property="spy" />
    <result column="listen" jdbcType="INTEGER" property="listen" />
    <result column="libaray" jdbcType="INTEGER" property="libaray" />
    <result column="negotiate" jdbcType="INTEGER" property="negotiate" />
    <result column="occultism" jdbcType="INTEGER" property="occultism" />
    <result column="cthulhu" jdbcType="INTEGER" property="cthulhu" />
    <result column="drive" jdbcType="INTEGER" property="drive" />
    <result column="combat" jdbcType="INTEGER" property="combat" />
    <result column="gun" jdbcType="INTEGER" property="gun" />
    <result column="san" jdbcType="INTEGER" property="san" />
    <result column="currenthp" jdbcType="INTEGER" property="currenthp" />
    <result column="currentmp" jdbcType="INTEGER" property="currentmp" />
    <result column="currentsan" jdbcType="INTEGER" property="currentsan" />
    <result column="profession" jdbcType="VARCHAR" property="profession" />
    <result column="accountant" jdbcType="INTEGER" property="accountant" />
    <result column="anthropology" jdbcType="INTEGER" property="anthropology" />
    <result column="evaluate" jdbcType="INTEGER" property="evaluate" />
    <result column="archeology" jdbcType="INTEGER" property="archeology" />
    <result column="charm" jdbcType="INTEGER" property="charm" />
    <result column="computer" jdbcType="INTEGER" property="computer" />
    <result column="credit" jdbcType="INTEGER" property="credit" />
    <result column="dress" jdbcType="INTEGER" property="dress" />
    <result column="dodge" jdbcType="INTEGER" property="dodge" />
    <result column="electrical" jdbcType="INTEGER" property="electrical" />
    <result column="mechanology" jdbcType="INTEGER" property="mechanology" />
    <result column="law" jdbcType="INTEGER" property="law" />
    <result column="locksmith" jdbcType="INTEGER" property="locksmith" />
    <result column="sneak" jdbcType="INTEGER" property="sneak" />
    <result column="medical" jdbcType="INTEGER" property="medical" />
    <result column="foreign" jdbcType="INTEGER" property="foreign" />
    <result column="pilot" jdbcType="INTEGER" property="pilot" />
    <result column="psychology" jdbcType="INTEGER" property="psychology" />
    <result column="trace" jdbcType="INTEGER" property="trace" />
    <result column="aid" jdbcType="INTEGER" property="aid" />
    <result column="heavy" jdbcType="INTEGER" property="heavy" />
    <result column="steal" jdbcType="INTEGER" property="steal" />
    <result column="threaten" jdbcType="INTEGER" property="threaten" />
    <result column="chemistry" jdbcType="INTEGER" property="chemistry" />
  </resultMap>


  <sql id="Base_Column_List">
    a.userid, hp, mp, a.name, potential, interest, shin, swim, spy, listen, libaray, negotiate,
    occultism, cthulhu, drive, combat, gun, san, currenthp, currentmp, currentsan, profession,
    accountant, anthropology, evaluate, archeology, charm, computer, credit, dress, dodge,
    electrical, mechanology, law, locksmith, sneak, medical, b.foreign, pilot, psychology,
    trace, aid, heavy, steal, threaten, chemistry, str, agl, edu, phy, cha, vol, bod, bra, luck, sex, age
  </sql>

  <select id="getselectByPrimaryKey" parameterType="com.coc.character.pojo.Person" resultMap="BaseResultMap">
   SELECT      birthplace,nationality,A.userid, hp, mp, A.name,potential, interest, shin, swim, spy, listen, libaray, negotiate,
   str, agl, edu, phy, cha, vol, bod, bra, luck, sex, age,
    occultism, cthulhu, drive, combat, gun, san, currenthp, currentmp, currentsan, profession,
    accountant, anthropology, evaluate, archeology, charm, computer, credit, dress, dodge,
    electrical, mechanology, law, locksmith, sneak, medical, B.FOREIGN, pilot, psychology,
    trace, aid, heavy, steal, threaten, chemistry, trick, psychiatrist, naturalist, astronomy,
    phytology, cryptology, meteorology, engineering, geology, zoology, sword, spear,
    pistol, crossbow, gunnery, diving, throwing, jump, beasttraining, history, shorthand,
    falsify, lipread, maintenance, cooking, fire, farming, makesex, musictheory, puzzle,
    mothertongue, ohterone, othertwo, otherthree, otherfour, otherfive, othersix
    FROM user A ,skill B
    where A.userid = #{userid,jdbcType=VARCHAR}
    and A.name = #{name,jdbcType=VARCHAR}
       AND A.userid =B.userid
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user
    where userid = #{userid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.coc.character.pojo.User">
    insert into user (userid, name, str, 
      agl, edu, phy, cha, 
      vol, bod, bra, luck, 
      sex, age)
    values (#{userid,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{str,jdbcType=INTEGER}, 
      #{agl,jdbcType=INTEGER}, #{edu,jdbcType=INTEGER}, #{phy,jdbcType=INTEGER}, #{cha,jdbcType=INTEGER}, 
      #{vol,jdbcType=INTEGER}, #{bod,jdbcType=INTEGER}, #{bra,jdbcType=INTEGER}, #{luck,jdbcType=INTEGER}, 
      #{sex,jdbcType=CHAR}, #{age,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.coc.character.pojo.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        userid,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="str != null">
        str,
      </if>
      <if test="agl != null">
        agl,
      </if>
      <if test="edu != null">
        edu,
      </if>
      <if test="phy != null">
        phy,
      </if>
      <if test="cha != null">
        cha,
      </if>
      <if test="vol != null">
        vol,
      </if>
      <if test="bod != null">
        bod,
      </if>
      <if test="bra != null">
        bra,
      </if>
      <if test="luck != null">
        luck,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="age != null">
        age,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        #{userid,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="str != null">
        #{str,jdbcType=INTEGER},
      </if>
      <if test="agl != null">
        #{agl,jdbcType=INTEGER},
      </if>
      <if test="edu != null">
        #{edu,jdbcType=INTEGER},
      </if>
      <if test="phy != null">
        #{phy,jdbcType=INTEGER},
      </if>
      <if test="cha != null">
        #{cha,jdbcType=INTEGER},
      </if>
      <if test="vol != null">
        #{vol,jdbcType=INTEGER},
      </if>
      <if test="bod != null">
        #{bod,jdbcType=INTEGER},
      </if>
      <if test="bra != null">
        #{bra,jdbcType=INTEGER},
      </if>
      <if test="luck != null">
        #{luck,jdbcType=INTEGER},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryPerson" parameterType="com.coc.character.pojo.User">
    <!--
     
     
    -->
    update user
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="str != null">
        str = #{str,jdbcType=INTEGER},
      </if>
      <if test="agl != null">
        agl = #{agl,jdbcType=INTEGER},
      </if>
      <if test="edu != null">
        edu = #{edu,jdbcType=INTEGER},
      </if>
      <if test="phy != null">
        phy = #{phy,jdbcType=INTEGER},
      </if>
      <if test="cha != null">
        cha = #{cha,jdbcType=INTEGER},
      </if>
      <if test="vol != null">
        vol = #{vol,jdbcType=INTEGER},
      </if>
      <if test="bod != null">
        bod = #{bod,jdbcType=INTEGER},
      </if>
      <if test="bra != null">
        bra = #{bra,jdbcType=INTEGER},
      </if>
      <if test="luck != null">
        luck = #{luck,jdbcType=INTEGER},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
    </set>
    where userid = #{userid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.coc.character.pojo.User">
    <!--
     
     
    -->
    update user
    set name = #{name,jdbcType=VARCHAR},
      str = #{str,jdbcType=INTEGER},
      agl = #{agl,jdbcType=INTEGER},
      edu = #{edu,jdbcType=INTEGER},
      phy = #{phy,jdbcType=INTEGER},
      cha = #{cha,jdbcType=INTEGER},
      vol = #{vol,jdbcType=INTEGER},
      bod = #{bod,jdbcType=INTEGER},
      bra = #{bra,jdbcType=INTEGER},
      luck = #{luck,jdbcType=INTEGER},
      sex = #{sex,jdbcType=CHAR},
      age = #{age,jdbcType=INTEGER}
    where userid = #{userid,jdbcType=VARCHAR}
  </update>

  <select id="getselect"  resultMap="BaseResultMap">
   SELECT      birthplace,nationality,A.userid, hp, mp, A.name,potential, interest, shin, swim, spy, listen, libaray, negotiate,
   str, agl, edu, phy, cha, vol, bod, bra, luck, sex, age,
    occultism, cthulhu, drive, combat, gun, san, currenthp, currentmp, currentsan, profession,
    accountant, anthropology, evaluate, archeology, charm, computer, credit, dress, dodge,
    electrical, mechanology, law, locksmith, sneak, medical, B.FOREIGN, pilot, psychology,
    trace, aid, heavy, steal, threaten, chemistry, trick, psychiatrist, naturalist, astronomy,
    phytology, cryptology, meteorology, engineering, geology, zoology, sword, spear,
    pistol, crossbow, gunnery, diving, throwing, jump, beasttraining, history, shorthand,
    falsify, lipread, maintenance, cooking, fire, farming, makesex, musictheory, puzzle,
    mothertongue, ohterone, othertwo, otherthree, otherfour, otherfive, othersix
    FROM user A ,skill B
    where
        A.userid =B.userid
  </select>

  <select id="getNumber"  resultType="java.lang.Integer">
   SELECT     count(*)
    FROM user A ,skill B
    where
        A.userid =B.userid
        and A.userid =#{userid,jdbcType=VARCHAR}
  </select>
</mapper>